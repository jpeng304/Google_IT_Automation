Question 1

Fill in the blanks to print the numbers from 15 to 5, counting down by fives.

number = 15 # Initialize the variable
while number >=5: # Complete the while loop condition
    print(number, end=" ")
    number -= 5 # Increment the variable

# Should print 15 10 5 


=======================================================================================================================================================================================================================

Question 2

Find and correct the error in the for loop.  The loop should print every number from 5 to 0 in descending order.
for number in range(5,-1,-1):
    print(number)

=======================================================================================================================================================================================================================

Question 3

Fill in the blanks to complete the function “digits(n)” to count how many digits the given number has. For example: 25 has 2 digits and 144 has 3 digits. 

Tip: you can count the digits of a number by dividing it by 10 once per digit until there are no digits left.
def digits(n):
    count = 0
    if n == 0:
      count += 1
    while n > 0: # Complete the while loop condition
        # Complete the body of the while loop. This should include 
        # performing a calculation and incrementing a variable in the
        # appropriate order.  
        n = n // 10  
        count += 1
      
    return count
    
print(digits(25))   # Should print 2
print(digits(144))  # Should print 3
print(digits(1000)) # Should print 4
print(digits(0))    # Should print 1

=======================================================================================================================================================================================================================

4.
Question 4

Fill in the blanks to complete the “sequence” function. This function should print a sequence of numbers in descending order, from the given "high" variable to the given "low" variable.  The range should make the loop run two times. Complete the range sequences in the nested loops so that the “sequence(1, 3)” function call prints the following:

3, 2, 1

3, 2, 1

def sequence(low, high):
    # Complete the outer loop range to make the loop run twice
    # to create two rows
    for x in range(low, high, 1): 
        # Complete the inner loop range to print the given variable
        # numbers starting from "high" to "low" 
        # Hint: To decrement a range parameter, use negative numbers
        for y in range(high, low-1, -1): 
            if y == low:
                # Don’t print a comma after the last item
                print(str(y)) 
            else:
                # Print a comma and a space between numbers
                print(str(y), end=", ") 

sequence(1, 3)
# Should print the sequence 3, 2, 1 two times, as shown above.


=======================================================================================================================================================================================================================

5.
Question 5

Fill in the blanks to complete the “divisible” function. This function should count the number of values from 0 to the “max” parameter that are evenly divisible (no remainder) by the “divisor” parameter. Complete the code so that a function call like “divisible(100,10)” will return the number “10”.
def divisible(max, divisor):
    count = 0 # Initialize an incremental variable
    for x in range(0, max, 1): # Complete the for loop
        if x % divisor == 0:
            count += 1 # Increment the appropriate variable
    return count

print(divisible(100, 10)) # Should be 10
print(divisible(10, 3)) # Should be 4
print(divisible(144, 17)) # Should be 9


=======================================================================================================================================================================================================================
6.
Question 6

Fill in the blanks to complete the “all_numbers” function. This function should return a space-separated string of all numbers, from the starting   “minimum” variable  up to and including the “maximum” variable that's passed into the function. Complete the for loop so that a function call like “all_numbers(3,6)” will return the numbers “3 4 5 6”.  

def all_numbers(minimum, maximum):

    return_string = "" # Initializes variable as a string

    # Complete the for loop with a range that includes all 
    # numbers up to and including the "maximum" value.
    for x in range(minimum, maximum+1, 1):
        # Complete the body of the loop by appending the number
        # followed by a space to the "return_string" variable.
        return_string = return_string + str(x) + " "

    # This .strip command will remove the final " " space 
    # at the end of the "return_string".
    return return_string.strip()


print(all_numbers(2,6))  # Should be 2 3 4 5 6
print(all_numbers(3,10)) # Should be 3 4 5 6 7 8 9 10
print(all_numbers(-1,1)) # Should be -1 0 1
print(all_numbers(0,5))  # Should be 0 1 2 3 4 5
print(all_numbers(0,0))  # Should be 0

=======================================================================================================================================================================================================================
7.
Question 7

The following code raises an error when executed. What's the reason for the error?
def decade_counter():
    while year < 50:
        year += 10
    return year

[]Incrementing by 10 instead of 1

[]Wrong comparison operator

[x]Failure to initialize the variable

[]Nothing is happening inside the while loop



=======================================================================================================================================================================================================================
8.
Question 8

What is the final value of “x” at the end of this for loop? Your answer should be only one number.

for x in range(1, 10, 3):
    print(x)


A:7

=======================================================================================================================================================================================================================
9.
Question 9

What is the final value of "y" at the end of the following nested loop code? Your answer should be only one number.
for x in range(10):
    for y in range(x):
        print(y)

A:8


=======================================================================================================================================================================================================================


10.
Question 10

The following code causes an infinite loop. Can you figure out what’s missing and how to fix it?

def count_numbers(first, last):
  # Loop through the numbers from first to last 
  x = first
  while x <= last:
    print(x)


count_numbers(2, 6) 
# Should print:
# 2
# 3
# 4 
# 5
# 6


[]Wrong comparison operator is used

[]Missing the break keyword

[x]Variable x is not incremented

[]Missing an if-else block


=======================================================================================================================================================================================================================

Question 3

Fill in the blanks to complete the function “even_numbers(n)”. This function should count how many even numbers exist in a sequence from 0 to the given “n”number, where 0 counts as an even number.  For example, even_numbers(25) should return 13, and even_numbers(6) should return 4.

def even_numbers(n):
    count = 0
    current_number = 0
    while current_number <= n: # Complete the while loop condition
        if current_number % 2 == 0:
            count += 1 # Increment the appropriate variable
        current_number += 1 # Increment the appropriate variable
    return count
    
print(even_numbers(25))   # Should print 13
print(even_numbers(144))  # Should print 73
print(even_numbers(1000)) # Should print 501
print(even_numbers(0))    # Should print 1



=======================================================================================================================================================================================================================


def even_numbers(maximum):

    return_string = "" # Initializes variable as a string

    # Complete the for loop with a range that includes all even numbers
    # up to and including the "maximum" value, but excluding 0.
    for x in range (1, maximum+1, 1): 

        # Complete the body of the loop by appending the even number
        # followed by a space to the "return_string" variable.
        if (x%2 == 0 ):
            return_string = return_string + str(x) + " "  

    # This .strip command will remove the final " " space at the end of
    # the "return_string".
    return return_string.strip() 

print(even_numbers(6))  # Should be 2 4 6
print(even_numbers(10)) # Should be 2 4 6 8 10
print(even_numbers(1))  # No numbers displayed
print(even_numbers(3))  # Should be 2
print(even_numbers(0))  # No numbers displayed
