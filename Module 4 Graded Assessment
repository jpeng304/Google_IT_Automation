1.
Question 1

Fill in the blanks to complete the “confirm_length” function. This function should return how many characters a string contains as long as it has one or more characters, otherwise it will return 0. Complete the string operations needed in this function so that input like "Monday" will produce the output "6".

def confirm_length(word):
    count = 0 
    # Complete the condition statement using a string operation. 
    if word.split() != "":
        # Complete the return statement using a string operation.
        for char in word:
            count += 1
        return count  
    else:
        return 0


print(confirm_length("a")) # Should print 1
print(confirm_length("This is a long string")) # Should print 21
print(confirm_length("Monday")) # Should print 6
print(confirm_length("")) # Should print 0

2.
Question 2

Fill in the blank to complete the “highlight_word” function. This function should change the given “word” to its upper-case version in a given “sentence”. Complete the string method needed in this function so that a function call like "highlight_word("Have a nice day", "nice")" will return the output "Have a NICE day".
def highlight_word(sentence, word):
    # Complete the return statement using a string method.
  

    new_sentence = ""
    word_ind = sentence.index(word)
    word_len = len(word)
    word_replace = word_ind + word_len
    new_sentence = sentence[0:word_ind] + word.upper() + sentence[word_replace:]

    
    return new_sentence


print(highlight_word("Have a nice day", "nice"))
# Should print: "Have a NICE day"
print(highlight_word("Shhh, don't be so loud!", "loud"))
# Should print: "Shhh, don't be so LOUD!"
print(highlight_word("Automating with Python is fun", "fun"))
# Should print: "Automating with Python is FUN"


3.
Question 3

Consider the following scenario about using Python lists: 

Employees at a company shared  the distance they drive to work (in miles) through an online survey. These distances were automatically added by Python to a list called “distances” in the order that each employee submitted their distance. Management wants the list to be sorted in the order of the longest distance to the shortest distance. 

Complete the function to sort the “distances” list. This function should:

    sort the given “distances” list, passed through the function’s parameters; ; 

    reverse the sort order so that it goes from the longest to the shortest distance;

    return the modified “distances” list.



def sort_distance(distances):
 
    distances.sort()
    distances.reverse()
 
    return distances


print(sort_distance([2,4,0,15,8,9]))
# Should print [15, 9, 8, 4, 2, 0]



4.
Question 4

 Fill in the blank to complete the “even_numbers” function. This function should use a list comprehension to create a list of even numbers using a conditional if statement with the modulo operator to test for numbers evenly divisible by 2. The function receives two variables and should return the list of even numbers that occur between the “first” and “last” variables exclusively (meaning don’t modify the default behavior of the range to exclude the “end” value in the range). For example, even_numbers(2, 7) should return [2, 4, 6].

def even_numbers(first, last):
  return [ c for c in range (first, last) if c%2 == 0 ]


print(even_numbers(4, 14)) # Should print [4, 6, 8, 10, 12]
print(even_numbers(0, 9))  # Should print [0, 2, 4, 6, 8]
print(even_numbers(2, 7))  # Should print [2, 4, 6]



5.
Question 5

Fill in the blanks to complete the “car_listing” function. This function accepts a “car_prices” dictionary. It should iterate through the keys (car models) and values (car prices) in that dictionary. For each item pair, the function should format a string so that a dictionary entry like ““Kia Soul“:19000” will print "A Kia Soul costs 19000 dollars". Each new string should appear on its own line.


def car_listing(car_prices):
  result = ""
  # Complete the for loop to iterate through the key and value items 
  # in the dictionary.
  for car,price in car_prices.items(): 
    result += "A {} costs {} dollars\n".format(car,price) # Use a string method to format the required string. 
  return result

print(car_listing({"Kia Soul":19000, "Lamborghini Diablo":55000, "Ford Fiesta":13000, "Toyota Prius":24000}))

# Should print:
# A Kia Soul costs 19000 dollars
# A Lamborghini Diablo costs 55000 dollars
# A Ford Fiesta costs 13000 dollars
# A Toyota Prius costs 24000 dollars



6.
Question 6

Consider the following scenario about using Python dictionaries: 

Tessa and Rick are hosting a party. Both sent out invitations to their friends, and each one collected responses into dictionaries, with names of their friends and how many guests each friend was bringing. Each dictionary is a partial guest list, but Rick's guest list has more current information about the number of guests. 

Complete the function to combine both dictionaries into one, with each friend listed only once, and the number of guests from Rick's dictionary taking precedence, if a name is included in both dictionaries. Then print the resulting dictionary. This function should:

    accept two dictionaries through the function’s parameters;

    combine both dictionaries into one, with each key listed only once;

    the values from the “guests1” dictionary taking precedence, if a key is included in both dictionaries;

    then print the new dictionary of combined items.


def combine_guests(guests1, guests2):
  # Use a dictionary method to combine the dictionaries.
  guests2.update(guests1)
  return guests2

Ricks_guests = { "Adam":2, "Camila":3, "David":1, "Jamal":3, "Charley":2, "Titus":1, "Raj":4}
Tessas_guests = { "David":4, "Noemi":1, "Raj":2, "Adam":1, "Sakira":3, "Chidi":5}

print(combine_guests(Ricks_guests, Tessas_guests))
# Should print:
# {'David': 1, 'Noemi': 1, 'Raj': 4, 'Adam': 2, 'Sakira': 3, 'Chidi': 5, 'Camila': 3, 'Jamal': 3, 'Charley': 2, 'Titus': 1}





7.
Question 7

Consider the following scenario about using Python dictionaries:

A teacher is using a dictionary to store student grades. The grades are stored as a point value out of 100.  Currently, the teacher has a dictionary setup for Term 1 grades and wants to duplicate it for Term 2. The student name keys in the dictionary should stay the same, but the grade values should be reset to 0.

Complete the “setup_gradebook” function so that input like “{"James": 93, "Felicity": 98, "Barakaa": 80}” will produce a resulting dictionary that contains  “{"James": 0, "Felicity": 0, "Barakaa": 0}”. This function should: 

    accept a dictionary “old_gradebook” variable through the function’s parameters;

    make a copy of the “old_gradebook” dictionary;

    iterate over each key and value pair in the new dictionary;

    replace the value for each key with the number 0;

    return the new dictionary.


def setup_gradebook(old_gradebook):
  # Use a dictionary method to create a new copy of the "old_gradebook".
  new_gradebook = old_gradebook.copy()
    # Complete the for loop to iterate over the new gradebook. 
  for name,grade in new_gradebook.items():
        # Use a dictionary operation to reset the grade values to 0.
    new_gradebook[name]= 0
  return new_gradebook

fall_gradebook = {"James": 93, "Felicity": 98, "Barakaa": 80}
print(setup_gradebook(fall_gradebook))
# Should output {'James': 0, 'Felicity': 0, 'Barakaa': 0}



Question 8

What do the following commands return when animal = "Hippopotamus"?
print(animal[3:6])
print(animal[-5])
print(animal[10:])

ppop, o, s

ppo, t, mus

(x) pop, t, us

popo, t, mus



9.
Question 9

What does the list "music_genres" contain after these commands are executed?
music_genres = ["rock", "pop", "country"]
music_genres.append("blues")

(x) ['rock', 'pop', 'country', 'blues']

['rock', 'pop', 'blues']

['rock', 'blues', 'country']

['rock', 'blues', 'pop', 'country']


10.
Question 10

What do the following commands return?

host_addresses = {"router": "192.168.1.1", "localhost": "127.0.0.1", "google": "8.8.8.8"}
host_addresses.keys()

dict_keys(['192.168.1.1', '127.0.0.1', '8.8.8.8'])

(X) dict_keys(['router', 'localhost', 'google'])

dict_keys({"router": "192.168.1.1", "localhost": "127.0.0.1", "google": "8.8.8.8"})

dict_keys(["router", "192.168.1.1", "localhost", "127.0.0.1", "google", "8.8.8.8"])
